{"ast":null,"code":"// frontend/src/services/api.js\n\nexport async function checkIfFakeNews(text) {\n  try {\n    const response = await fetch('http://localhost:5000/predict', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Server error: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error:\", error);\n    return {\n      error: \"Failed to fetch prediction\"\n    };\n  }\n}","map":{"version":3,"names":["checkIfFakeNews","text","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json","error","console"],"sources":["F:/news aggregator/News-API/news-aggregator/News-API/frontend/src/services/api.js"],"sourcesContent":["// frontend/src/services/api.js\r\n\r\nexport async function checkIfFakeNews(text) {\r\n    try {\r\n        const response = await fetch('http://localhost:5000/predict', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ text })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`Server error: ${response.status}`);\r\n        }\r\n\r\n        return await response.json();\r\n    } catch (error) {\r\n        console.error(\"Error:\", error);\r\n        return { error: \"Failed to fetch prediction\" };\r\n    }\r\n}\r\n"],"mappings":"AAAA;;AAEA,OAAO,eAAeA,eAAeA,CAACC,IAAI,EAAE;EACxC,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;MAC1DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP;MAAK,CAAC;IACjC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,iBAAiBR,QAAQ,CAACS,MAAM,EAAE,CAAC;IACvD;IAEA,OAAO,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAO;MAAEA,KAAK,EAAE;IAA6B,CAAC;EAClD;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
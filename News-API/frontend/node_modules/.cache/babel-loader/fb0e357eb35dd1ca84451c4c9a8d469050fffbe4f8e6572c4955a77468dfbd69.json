{"ast":null,"code":"const express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst bodyParser = require(\"body-parser\");\nconst cors = require(\"cors\");\nconst bcrypt = require(\"bcrypt\");\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Middleware\napp.use(bodyParser.json());\napp.use(cors());\n\n// MongoDB connection\nmongoose.connect(\"mongodb://localhost:27017/newsApp\", {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log(\"MongoDB connected\")).catch(err => console.error(\"MongoDB connection error:\", err));\n\n// User schema and model\nconst userSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\nconst User = mongoose.model(\"User\", userSchema);\n\n// Signup route\napp.post(\"/signup\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  console.log(\"Signup request received with email:\", email);\n  try {\n    // Check if user already exists\n    const existingUser = await User.findOne({\n      email\n    });\n    if (existingUser) {\n      console.log(\"User already exists with this email:\", email);\n      return res.status(400).json({\n        message: \"User already exists\"\n      });\n    }\n\n    // Hash the password\n    const hashedPassword = await bcrypt.hash(password, 10);\n    console.log(\"Password hashed successfully\");\n\n    // Create a new user\n    const newUser = new User({\n      email,\n      password: hashedPassword\n    });\n    await newUser.save();\n    console.log(\"New user registered successfully:\", newUser);\n    res.status(201).json({\n      message: \"Registration successful\"\n    });\n  } catch (error) {\n    console.error(\"Error registering user:\", error.message);\n    res.status(500).json({\n      message: \"Error registering user\",\n      error: error.message\n    });\n  }\n});\n\n// Login route\napp.post(\"/login\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  console.log(\"Login request received with email:\", email);\n  try {\n    const user = await User.findOne({\n      email\n    });\n    if (!user) {\n      console.log(\"User not found with email:\", email);\n      return res.status(401).json({\n        message: \"Invalid credentials\"\n      });\n    }\n\n    // Compare password with hashed password\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n      console.log(\"Password mismatch for user with email:\", email);\n      return res.status(401).json({\n        message: \"Invalid credentials\"\n      });\n    }\n    console.log(\"User logged in successfully:\", email);\n    res.status(200).json({\n      message: \"Login successful\"\n    });\n  } catch (error) {\n    console.error(\"Error logging in:\", error.message);\n    res.status(500).json({\n      message: \"Error logging in\",\n      error: error.message\n    });\n  }\n});\n\n// Start the server\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));","map":{"version":3,"names":["express","require","mongoose","bodyParser","cors","bcrypt","app","PORT","process","env","use","json","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","error","userSchema","Schema","email","type","String","required","unique","password","createdAt","Date","default","now","User","model","post","req","res","body","existingUser","findOne","status","message","hashedPassword","hash","newUser","save","user","isMatch","compare","listen"],"sources":["F:/news aggregator/News-API/News-API/frontend/src/components/Signup.js"],"sourcesContent":["const express = require(\"express\");\r\nconst mongoose = require(\"mongoose\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst cors = require(\"cors\");\r\nconst bcrypt = require(\"bcrypt\");\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 5000;\r\n\r\n// Middleware\r\napp.use(bodyParser.json());\r\napp.use(cors());\r\n\r\n// MongoDB connection\r\nmongoose\r\n  .connect(\"mongodb://localhost:27017/newsApp\", {\r\n    useNewUrlParser: true,\r\n    useUnifiedTopology: true,\r\n  })\r\n  .then(() => console.log(\"MongoDB connected\"))\r\n  .catch((err) => console.error(\"MongoDB connection error:\", err));\r\n\r\n// User schema and model\r\nconst userSchema = new mongoose.Schema({\r\n  email: { type: String, required: true, unique: true },\r\n  password: { type: String, required: true },\r\n  createdAt: { type: Date, default: Date.now },\r\n});\r\nconst User = mongoose.model(\"User\", userSchema);\r\n\r\n// Signup route\r\napp.post(\"/signup\", async (req, res) => {\r\n  const { email, password } = req.body;\r\n  console.log(\"Signup request received with email:\", email);\r\n\r\n  try {\r\n    // Check if user already exists\r\n    const existingUser = await User.findOne({ email });\r\n    if (existingUser) {\r\n      console.log(\"User already exists with this email:\", email);\r\n      return res.status(400).json({ message: \"User already exists\" });\r\n    }\r\n\r\n    // Hash the password\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    console.log(\"Password hashed successfully\");\r\n\r\n    // Create a new user\r\n    const newUser = new User({ email, password: hashedPassword });\r\n    await newUser.save();\r\n    console.log(\"New user registered successfully:\", newUser);\r\n\r\n    res.status(201).json({ message: \"Registration successful\" });\r\n  } catch (error) {\r\n    console.error(\"Error registering user:\", error.message);\r\n    res.status(500).json({ message: \"Error registering user\", error: error.message });\r\n  }\r\n});\r\n\r\n// Login route\r\napp.post(\"/login\", async (req, res) => {\r\n  const { email, password } = req.body;\r\n  console.log(\"Login request received with email:\", email);\r\n\r\n  try {\r\n    const user = await User.findOne({ email });\r\n    if (!user) {\r\n      console.log(\"User not found with email:\", email);\r\n      return res.status(401).json({ message: \"Invalid credentials\" });\r\n    }\r\n\r\n    // Compare password with hashed password\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      console.log(\"Password mismatch for user with email:\", email);\r\n      return res.status(401).json({ message: \"Invalid credentials\" });\r\n    }\r\n\r\n    console.log(\"User logged in successfully:\", email);\r\n    res.status(200).json({ message: \"Login successful\" });\r\n  } catch (error) {\r\n    console.error(\"Error logging in:\", error.message);\r\n    res.status(500).json({ message: \"Error logging in\", error: error.message });\r\n  }\r\n});\r\n\r\n// Start the server\r\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}